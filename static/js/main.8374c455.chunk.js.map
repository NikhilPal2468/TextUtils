{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","aboutText","placeholder","TextForm","reverse","useState","text","setText","reverseText","setReverseText","heading","htmlFor","rows","onChange","event","target","value","i","length","style","backgroundColor","color","onClick","newText","toUpperCase","showAlert","toLowerCase","toCopy","document","getElementById","select","navigator","clipboard","writeText","split","defaultProps","Alert","alert","role","msg","About","myStyle","setMStyle","innerHTML","App","setAlert","message","setTimeout","setMode","exact","path","body","name","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8374c455.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Link} from 'react-router-dom'\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n        </li>\r\n      </ul>\r\n      <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title :PropTypes.string.isRequired,\r\n    aboutText : PropTypes.string\r\n}\r\nNavbar.defaultProps = {\r\n    title: 'TextUtils',\r\n    aboutText: 'About'\r\n};","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        // console.log(text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert('Converted to UpperCase', 'success');\r\n    }\r\n    const handleLowClick = ()=>{\r\n        // console.log(text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert('Converted to LowerCase', 'success');\r\n    }\r\n    const handleCopy = ()=>{\r\n        let toCopy = document.getElementById('myBox');\r\n        toCopy.select();\r\n        navigator.clipboard.writeText(toCopy.value)\r\n        props.showAlert('Copied to clipboard!', 'success');\r\n    }\r\n    const handleRevClick = ()=>{\r\n        // console.log(text);\r\n        let newText = '';\r\n        for (let i = text.length - 1; i >= 0; i--) {\r\n            newText += text[i];\r\n        }\r\n        setText(newText);\r\n        props.showAlert('Your message is reversed', 'success');\r\n    }\r\n    let reverse = '';\r\n    const handleOnChange = (event)=>{\r\n        // console.log(\"changing the text\");\r\n        setText(event.target.value);\r\n        for (let i = event.target.value.length - 1; i >= 0; i--) {\r\n            reverse += event.target.value[i];\r\n        }\r\n        setReverseText(reverse);\r\n    }\r\n    const [text, setText] = useState('');\r\n    const [reverseText, setReverseText] = useState('');\r\n    // text = \"nfn\"; //not possible to change value of text. Actually its a state, we can't change state like this we have to use function\r\n    // setText(\"klnsdsa\");\r\n    return (\r\n        <>\r\n        <div className=\"container\">\r\n        <h2>{props.heading}</h2>\r\n        <div className=\"mb-3\">\r\n            <label htmlFor=\"myBox\" className=\"form-label\">Example textarea</label>\r\n            <textarea className=\"form-control\" id=\"myBox\" rows=\"8\" onChange={handleOnChange} value={text} style={{\r\n                backgroundColor: props.mode === 'light'?'white' : 'grey',\r\n                color: props.mode === 'light'? 'black':'white'\r\n            }}></textarea>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to UpperCase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleLowClick}>Convert to LowerCase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy Text</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleRevClick}>Reverse your string</button>\r\n        </div>\r\n        </div>\r\n        <div className=\"container my-3\">\r\n            <h1>Your text summary</h1>\r\n            <p>{text.split(\" \")[text.split(\" \").length-1] === \"\" ?text.split(\" \").length-1:text.split(\" \").length} words and {text.length} character</p>\r\n            {/* <p>{text.split(\" \").length} words and {text.length} character</p> */}\r\n            <p>{0.008 * (text.split(\" \").length-1)} minutes to read</p>\r\n            <h2>Preview</h2>\r\n            <p>{reverseText}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{props.alert.msg}</strong> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React, {useState} from \"react\";\r\n\r\n\r\n// let myStyle = {\r\n//     color: 'white',\r\n//     backgroundColor: 'black'\r\n// }\r\nexport default function About() {\r\n    const toggleStyle = (event)=>{\r\n        if(myStyle.color === 'white')\r\n        {\r\n            setMStyle({\r\n                color: 'black',\r\n                backgroundColor: 'white'\r\n            })\r\n            document.getElementById('lightdark').innerHTML = \"Enable Dark Mode\"\r\n        }\r\n        else{\r\n            setMStyle({\r\n                color: 'white',\r\n                backgroundColor: 'black'\r\n            })\r\n            document.getElementById('lightdark').innerHTML = \"Enable Light Mode\"\r\n        }\r\n    }\r\n    const [myStyle, setMStyle] = useState({\r\n        color: 'white',\r\n        backgroundColor: 'black'\r\n    })\r\n  return (\r\n      <div className=\"container\" style={myStyle}>\r\n      <h1>About Us</h1>\r\n    <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n      <div className=\"accordion-item\" style={myStyle}>\r\n        <h2 className=\"accordion-header\" id=\"headingOne\">\r\n          <button style={myStyle}\r\n            className=\"accordion-button\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#collapseOne\"\r\n            aria-expanded=\"true\"\r\n            aria-controls=\"collapseOne\"\r\n          >\r\n            Accordion Item #1\r\n          </button>\r\n        </h2>\r\n        <div\r\n          id=\"collapseOne\"\r\n          className=\"accordion-collapse collapse show\"\r\n          aria-labelledby=\"headingOne\"\r\n          data-bs-parent=\"#accordionExample\"\r\n        >\r\n          <div className=\"accordion-body\">\r\n            <strong>This is the first item's accordion body.</strong> It is\r\n            shown by default, until the collapse plugin adds the appropriate\r\n            classes that we use to style each element. These classes control the\r\n            overall appearance, as well as the showing and hiding via CSS\r\n            transitions. You can modify any of this with custom CSS or\r\n            overriding our default variables. It's also worth noting that just\r\n            about any HTML can go within the <code>.accordion-body</code>,\r\n            though the transition does limit overflow.\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"accordion-item\" style={myStyle}>\r\n        <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n          <button style={myStyle}\r\n            className=\"accordion-button collapsed\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#collapseTwo\"\r\n            aria-expanded=\"false\"\r\n            aria-controls=\"collapseTwo\"\r\n          >\r\n            Accordion Item #2\r\n          </button>\r\n        </h2>\r\n        <div\r\n          id=\"collapseTwo\"\r\n          className=\"accordion-collapse collapse\"\r\n          aria-labelledby=\"headingTwo\"\r\n          data-bs-parent=\"#accordionExample\"\r\n        >\r\n          <div className=\"accordion-body\">\r\n            <strong>This is the second item's accordion body.</strong> It is\r\n            hidden by default, until the collapse plugin adds the appropriate\r\n            classes that we use to style each element. These classes control the\r\n            overall appearance, as well as the showing and hiding via CSS\r\n            transitions. You can modify any of this with custom CSS or\r\n            overriding our default variables. It's also worth noting that just\r\n            about any HTML can go within the <code>.accordion-body</code>,\r\n            though the transition does limit overflow.\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"accordion-item\" style={myStyle}>\r\n        <h2 className=\"accordion-header\" id=\"headingThree\">\r\n          <button style={myStyle}\r\n            className=\"accordion-button collapsed\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#collapseThree\"\r\n            aria-expanded=\"false\"\r\n            aria-controls=\"collapseThree\"\r\n          >\r\n            Accordion Item #3\r\n          </button>\r\n        </h2>\r\n        <div\r\n          id=\"collapseThree\"\r\n          className=\"accordion-collapse collapse\"\r\n          aria-labelledby=\"headingThree\"\r\n          data-bs-parent=\"#accordionExample\"\r\n        >\r\n          <div className=\"accordion-body\">\r\n            <strong>This is the third item's accordion body.</strong> It is\r\n            hidden by default, until the collapse plugin adds the appropriate\r\n            classes that we use to style each element. These classes control the\r\n            overall appearance, as well as the showing and hiding via CSS\r\n            transitions. You can modify any of this with custom CSS or\r\n            overriding our default variables. It's also worth noting that just\r\n            about any HTML can go within the <code>.accordion-body</code>,\r\n            though the transition does limit overflow.\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div className=\"continer my-3\"> \r\n    <button id=\"lightdark\" onClick={toggleStyle} className=\"btn btn-primary\">Enable Light Mode</button>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport About from './components/About';\nfunction App() {\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n  const [mode, setMode] = useState('light');\n  // const toggleMode = ()=>{\n  //   if(mode === 'light'){\n  //     setMode('dark');\n  //     document.body.style.backgroundColor = '#042743'\n  //     document.body.style.color = 'white'\n  //     showAlert('Dark mode has been enabled', 'success');\n  //   }\n  //   else{\n  //     setMode('light')\n  //     document.body.style.backgroundColor = 'white'\n  //     document.body.style.color = 'black'\n  //     showAlert('Light mode has been enabled', 'success');\n  //   }\n  // }\n  const redMode = ()=>{\n      setMode('dark');\n      document.body.style.backgroundColor = 'red'\n      document.body.style.color = 'white'\n      showAlert('Red mode has been enabled', 'success');\n  }\n  const blackMode = ()=>{\n      setMode('dark');\n      document.body.style.backgroundColor = 'black'\n      document.body.style.color = 'white'\n      showAlert('Black mode has been enabled', 'success');\n  }\n  const greenMode = ()=>{\n      setMode('dark');\n      document.body.style.backgroundColor = 'green'\n      document.body.style.color = 'white'\n      showAlert('Green mode has been enabled', 'success');\n  }\n  const lightMode = ()=>{\n      setMode('light');\n      document.body.style.backgroundColor = 'white'\n      document.body.style.color = 'black'\n      showAlert('Light mode has been enabled', 'success');\n  }\n  return (\n    <>\n      {/* <Navbar title=\"TextUtils\" aboutText=\"About TextUtils\"/> */}\n      <Router>\n      <Navbar mode={mode}/>\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n      {/* <div className={`form-check form-switch text-${mode === 'dark' ?'light':'dark'}`}>\n        <input className=\"form-check-input\" onClick={toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\n      </div> */}\n      <Switch>\n        <Route exact path=\"/about\"> {/* Its always good to write exact before path */}\n          <About/>\n        </Route>\n        <Route exact path=\"/\">\n        <TextForm showAlert={showAlert} heading=\"Enter text to analyse\" mode={mode}/>\n        </Route>\n      </Switch>\n      <div className={`form-check text-${mode === 'dark' ?'light':'dark'}`}>\n        <input className=\"form-check-input\" onClick={redMode} type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault1\"/>\n        <label className=\"form-check-label\" htmlFor=\"flexRadioDefault1\">\n          Enable Red Mode\n        </label>\n      </div>\n      <div className={`form-check text-${mode === 'dark' ?'light':'dark'}`}>\n        <input className=\"form-check-input\" onClick={blackMode} type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault2\"/>\n        <label className=\"form-check-label\" htmlFor=\"flexRadioDefault2\">\n          Enable Black Mode\n        </label>\n      </div>\n      <div className={`form-check text-${mode === 'dark' ?'light':'dark'}`}>\n        <input className=\"form-check-input\" onClick={greenMode} type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault3\"/>\n        <label className=\"form-check-label\" htmlFor=\"flexRadioDefault3\">\n          Enable Green Mode\n        </label>\n      </div>\n      <div className={`form-check text-${mode === 'dark' ?'light':'dark'}`}>\n        <input className=\"form-check-input\" onClick={lightMode} type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault4\"/>\n        <label className=\"form-check-label\" htmlFor=\"flexRadioDefault4\">\n          Enable Light Mode\n        </label>\n      </div>\n        \n        {/* <About/> */}\n      </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}